/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 55 generated on 2012-06-04 12:03:56.657797
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[1]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((x3)*(x4));
x11=((x0)*(x1)*(x2));
x12=((x10)+(((-1.00000000000000)*(x11))));
x13=((x1)*(x2)*(x3));
x14=((x0)*(x4));
x15=((x13)+(x14));
x16=((-1.00000000000000)*(x15));
eetrans[0]=((((x9)*(((((-0.0159000000000000)*(x0)*(x5)*(x6)))+(((0.0159000000000000)*(x12)*(x7)))))))+(((0.123950000000000)*(x0)*(x5)*(x7)))+(((x8)*(((((-0.0159000000000000)*(x2)*(x3)))+(((-0.0159000000000000)*(x1)*(x14)))))))+(((0.105000000000000)*(x0)*(x5)))+(((0.0150000000000000)*(x0)*(x1)))+(((x6)*(((((0.123950000000000)*(x10)))+(((-0.123950000000000)*(x11))))))));
eetrans[1]=((-0.0980000000000000)+(((0.123950000000000)*(x1)*(x7)))+(((x9)*(((((0.0159000000000000)*(x2)*(x5)*(x7)))+(((-0.0159000000000000)*(x1)*(x6)))))))+(((0.0159000000000000)*(x4)*(x5)*(x8)))+(((0.123950000000000)*(x2)*(x5)*(x6)))+(((-0.0150000000000000)*(x5)))+(((0.105000000000000)*(x1))));
eetrans[2]=((0.100000000000000)+(((-0.0150000000000000)*(x1)*(x3)))+(((x6)*(((((0.123950000000000)*(x14)))+(((0.123950000000000)*(x13)))))))+(((x8)*(((((-0.0159000000000000)*(x0)*(x2)))+(((0.0159000000000000)*(x1)*(x10)))))))+(((-0.105000000000000)*(x3)*(x5)))+(((x9)*(((((0.0159000000000000)*(x3)*(x5)*(x6)))+(((-0.0159000000000000)*(x16)*(x7)))))))+(((-0.123950000000000)*(x3)*(x5)*(x7))));
eerot[0]=((((x9)*(((((-1.00000000000000)*(x1)*(x14)))+(((-1.00000000000000)*(x2)*(x3)))))))+(((x8)*(((((x0)*(x5)*(x6)))+(((-1.00000000000000)*(x12)*(x7))))))));
eerot[1]=((((x8)*(((((-1.00000000000000)*(x2)*(x5)*(x7)))+(((x1)*(x6)))))))+(((x4)*(x5)*(x9))));
eerot[2]=((((x8)*(((((-1.00000000000000)*(x3)*(x5)*(x6)))+(((x16)*(x7)))))))+(((x9)*(((((x1)*(x10)))+(((-1.00000000000000)*(x0)*(x2))))))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 5; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x56000007; }

class IKSolver {
public:
IKReal j18,cj18,sj18,htj18,j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j22,cj22,sj22,htj22,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij22[2], _nj22;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j18=numeric_limits<IKReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IKReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IKReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IKReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1; j22=numeric_limits<IKReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.00000000000000)*(r02));
new_py=((0.100000000000000)+(((-1.00000000000000)*(pz))));
new_r02=r01;
new_pz=((0.0980000000000000)+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
IKReal op[8+1], zeror[8];
int numroots;
IKReal gconst0;
gconst0=((-0.00436641250000000)+(pp)+(((-0.210000000000000)*(px)))+(((0.0300000000000000)*(pz))));
IKReal gconst1;
gconst1=((((-0.420000000000000)*(pz)))+(((-0.0600000000000000)*(px))));
IKReal gconst2;
gconst2=((-0.00436641250000000)+(((-0.0300000000000000)*(pz)))+(pp)+(((0.210000000000000)*(px))));
IKReal gconst3;
gconst3=((((pz)*(r02)))+(((0.0150000000000000)*(r02)))+(((py)*(r01)))+(((-0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst4;
gconst4=((((-0.210000000000000)*(r02)))+(((-0.0300000000000000)*(r00))));
IKReal gconst5;
gconst5=((((-0.0150000000000000)*(r02)))+(((pz)*(r02)))+(((py)*(r01)))+(((0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst6;
gconst6=((-0.00436641250000000)+(pp)+(((-0.210000000000000)*(px)))+(((0.0300000000000000)*(pz))));
IKReal gconst7;
gconst7=((((-0.420000000000000)*(pz)))+(((-0.0600000000000000)*(px))));
IKReal gconst8;
gconst8=((-0.00436641250000000)+(((-0.0300000000000000)*(pz)))+(pp)+(((0.210000000000000)*(px))));
IKReal gconst9;
gconst9=((((pz)*(r02)))+(((0.0150000000000000)*(r02)))+(((py)*(r01)))+(((-0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst10;
gconst10=((((-0.210000000000000)*(r02)))+(((-0.0300000000000000)*(r00))));
IKReal gconst11;
gconst11=((((-0.0150000000000000)*(r02)))+(((pz)*(r02)))+(((py)*(r01)))+(((0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst12;
gconst12=((-0.420000000000000)*(py));
IKReal gconst13;
gconst13=((-0.120000000000000)*(py));
IKReal gconst14;
gconst14=((0.420000000000000)*(py));
IKReal gconst15;
gconst15=((-0.210000000000000)*(r01));
IKReal gconst16;
gconst16=((-0.0600000000000000)*(r01));
IKReal gconst17;
gconst17=((0.210000000000000)*(r01));
IKReal gconst18;
gconst18=((-0.420000000000000)*(py));
IKReal gconst19;
gconst19=((-0.120000000000000)*(py));
IKReal gconst20;
gconst20=((0.420000000000000)*(py));
IKReal gconst21;
gconst21=((-0.210000000000000)*(r01));
IKReal gconst22;
gconst22=((-0.0600000000000000)*(r01));
IKReal gconst23;
gconst23=((0.210000000000000)*(r01));
IKReal gconst24;
gconst24=((-0.00436641250000000)+(pp)+(((0.210000000000000)*(px)))+(((0.0300000000000000)*(pz))));
IKReal gconst25;
gconst25=((((-0.420000000000000)*(pz)))+(((0.0600000000000000)*(px))));
IKReal gconst26;
gconst26=((-0.00436641250000000)+(((-0.0300000000000000)*(pz)))+(pp)+(((-0.210000000000000)*(px))));
IKReal gconst27;
gconst27=((((pz)*(r02)))+(((0.0150000000000000)*(r02)))+(((py)*(r01)))+(((0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst28;
gconst28=((((-0.210000000000000)*(r02)))+(((0.0300000000000000)*(r00))));
IKReal gconst29;
gconst29=((((-0.0150000000000000)*(r02)))+(((pz)*(r02)))+(((py)*(r01)))+(((-0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst30;
gconst30=((-0.00436641250000000)+(pp)+(((0.210000000000000)*(px)))+(((0.0300000000000000)*(pz))));
IKReal gconst31;
gconst31=((((-0.420000000000000)*(pz)))+(((0.0600000000000000)*(px))));
IKReal gconst32;
gconst32=((-0.00436641250000000)+(((-0.0300000000000000)*(pz)))+(pp)+(((-0.210000000000000)*(px))));
IKReal gconst33;
gconst33=((((pz)*(r02)))+(((0.0150000000000000)*(r02)))+(((py)*(r01)))+(((0.105000000000000)*(r00)))+(((px)*(r00))));
IKReal gconst34;
gconst34=((((-0.210000000000000)*(r02)))+(((0.0300000000000000)*(r00))));
IKReal gconst35;
gconst35=((((-0.0150000000000000)*(r02)))+(((pz)*(r02)))+(((py)*(r01)))+(((-0.105000000000000)*(r00)))+(((px)*(r00))));
op[0]=((((gconst24)*(gconst29)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst26)*(gconst27)*(gconst32)*(gconst33)))+(((gconst26)*(gconst28)*(gconst31)*(gconst33)))+(((gconst25)*(gconst29)*(gconst30)*(gconst34)))+(((gconst26)*(gconst27)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst25)*(gconst29)*(gconst31)*(gconst33)))+(((-1.00000000000000)*(gconst24)*(gconst29)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst26)*(gconst28)*(gconst30)*(gconst34))));
op[1]=((((gconst19)*(gconst26)*(gconst28)*(gconst33)))+(((-1.00000000000000)*(gconst14)*(gconst28)*(gconst30)*(gconst34)))+(((-1.00000000000000)*(gconst14)*(gconst27)*(gconst32)*(gconst33)))+(((gconst21)*(gconst26)*(gconst28)*(gconst31)))+(((gconst17)*(gconst25)*(gconst30)*(gconst34)))+(((gconst16)*(gconst26)*(gconst31)*(gconst33)))+(((gconst21)*(gconst24)*(gconst29)*(gconst32)))+(((gconst15)*(gconst26)*(gconst30)*(gconst35)))+(((gconst20)*(gconst24)*(gconst29)*(gconst33)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst29)*(gconst31)))+(((-1.00000000000000)*(gconst15)*(gconst26)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst17)*(gconst24)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst27)*(gconst33)))+(((gconst23)*(gconst26)*(gconst27)*(gconst30)))+(((-1.00000000000000)*(gconst21)*(gconst26)*(gconst27)*(gconst32)))+(((gconst13)*(gconst29)*(gconst30)*(gconst34)))+(((gconst14)*(gconst28)*(gconst31)*(gconst33)))+(((gconst12)*(gconst29)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst17)*(gconst25)*(gconst31)*(gconst33)))+(((gconst17)*(gconst24)*(gconst32)*(gconst33)))+(((gconst18)*(gconst25)*(gconst29)*(gconst34)))+(((-1.00000000000000)*(gconst13)*(gconst29)*(gconst31)*(gconst33)))+(((-1.00000000000000)*(gconst18)*(gconst24)*(gconst29)*(gconst35)))+(((-1.00000000000000)*(gconst22)*(gconst26)*(gconst28)*(gconst30)))+(((gconst18)*(gconst26)*(gconst27)*(gconst35)))+(((-1.00000000000000)*(gconst16)*(gconst26)*(gconst30)*(gconst34)))+(((-1.00000000000000)*(gconst18)*(gconst26)*(gconst28)*(gconst34)))+(((gconst22)*(gconst25)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst19)*(gconst25)*(gconst29)*(gconst33)))+(((-1.00000000000000)*(gconst23)*(gconst24)*(gconst29)*(gconst30)))+(((gconst14)*(gconst27)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst12)*(gconst29)*(gconst30)*(gconst35))));
op[2]=((((gconst17)*(gconst21)*(gconst24)*(gconst32)))+(((gconst15)*(gconst23)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst25)*(gconst29)*(gconst33)*(gconst7)))+(((gconst13)*(gconst22)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst26)*(gconst27)*(gconst32)*(gconst9)))+(((gconst24)*(gconst32)*(gconst33)*(gconst5)))+(((gconst14)*(gconst23)*(gconst27)*(gconst30)))+(((-1.00000000000000)*(gconst16)*(gconst18)*(gconst26)*(gconst34)))+(((-1.00000000000000)*(gconst10)*(gconst26)*(gconst28)*(gconst30)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst26)*(gconst32)))+(((-1.00000000000000)*(gconst19)*(gconst21)*(gconst25)*(gconst29)))+(((-1.00000000000000)*(gconst24)*(gconst29)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst25)*(gconst29)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst29)*(gconst33)))+(((gconst16)*(gconst19)*(gconst26)*(gconst33)))+(((gconst14)*(gconst16)*(gconst31)*(gconst33)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst28)*(gconst30)))+(((gconst0)*(gconst29)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst2)*(gconst27)*(gconst32)*(gconst33)))+(((gconst2)*(gconst28)*(gconst31)*(gconst33)))+(((gconst13)*(gconst18)*(gconst29)*(gconst34)))+(((gconst10)*(gconst25)*(gconst29)*(gconst30)))+(((gconst14)*(gconst21)*(gconst28)*(gconst31)))+(((-1.00000000000000)*(gconst26)*(gconst28)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst31)*(gconst33)))+(((gconst25)*(gconst30)*(gconst34)*(gconst5)))+(((gconst14)*(gconst19)*(gconst28)*(gconst33)))+(((gconst26)*(gconst3)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst14)*(gconst21)*(gconst27)*(gconst32)))+(((gconst20)*(gconst21)*(gconst24)*(gconst29)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst26)*(gconst28)))+(((-1.00000000000000)*(gconst12)*(gconst18)*(gconst29)*(gconst35)))+(((gconst11)*(gconst26)*(gconst27)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst17)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst12)*(gconst23)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst32)*(gconst33)))+(((gconst13)*(gconst17)*(gconst30)*(gconst34)))+(((-1.00000000000000)*(gconst24)*(gconst30)*(gconst35)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst23)*(gconst24)*(gconst29)))+(((gconst17)*(gconst18)*(gconst25)*(gconst34)))+(((-1.00000000000000)*(gconst26)*(gconst27)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst30)*(gconst34)))+(((gconst25)*(gconst29)*(gconst34)*(gconst6)))+(((gconst24)*(gconst29)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst24)*(gconst35)))+(((-1.00000000000000)*(gconst17)*(gconst19)*(gconst25)*(gconst33)))+(((gconst16)*(gconst21)*(gconst26)*(gconst31)))+(((gconst18)*(gconst22)*(gconst25)*(gconst29)))+(((gconst1)*(gconst29)*(gconst30)*(gconst34)))+(((-1.00000000000000)*(gconst17)*(gconst23)*(gconst24)*(gconst30)))+(((gconst15)*(gconst18)*(gconst26)*(gconst35)))+(((-1.00000000000000)*(gconst0)*(gconst29)*(gconst30)*(gconst35)))+(((gconst12)*(gconst17)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst26)*(gconst30)))+(((gconst26)*(gconst28)*(gconst33)*(gconst7)))+(((gconst26)*(gconst28)*(gconst31)*(gconst9)))+(((gconst19)*(gconst21)*(gconst26)*(gconst28)))+(((-1.00000000000000)*(gconst13)*(gconst21)*(gconst29)*(gconst31)))+(((-1.00000000000000)*(gconst2)*(gconst28)*(gconst30)*(gconst34)))+(((-1.00000000000000)*(gconst14)*(gconst20)*(gconst27)*(gconst33)))+(((-1.00000000000000)*(gconst1)*(gconst29)*(gconst31)*(gconst33)))+(((gconst2)*(gconst27)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst11)*(gconst24)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst20)*(gconst21)*(gconst26)*(gconst27)))+(((gconst14)*(gconst15)*(gconst30)*(gconst35)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst26)*(gconst33)))+(((gconst26)*(gconst31)*(gconst33)*(gconst4)))+(((gconst12)*(gconst20)*(gconst29)*(gconst33)))+(((gconst18)*(gconst23)*(gconst26)*(gconst27)))+(((gconst24)*(gconst29)*(gconst32)*(gconst9)))+(((gconst17)*(gconst22)*(gconst25)*(gconst30)))+(((-1.00000000000000)*(gconst25)*(gconst31)*(gconst33)*(gconst5)))+(((gconst26)*(gconst27)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst17)*(gconst21)*(gconst25)*(gconst31)))+(((gconst12)*(gconst21)*(gconst29)*(gconst32)))+(((gconst14)*(gconst18)*(gconst27)*(gconst35)))+(((-1.00000000000000)*(gconst26)*(gconst3)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst28)*(gconst34)))+(((gconst17)*(gconst20)*(gconst24)*(gconst33)))+(((-1.00000000000000)*(gconst26)*(gconst30)*(gconst34)*(gconst4))));
op[3]=((((-1.00000000000000)*(gconst13)*(gconst19)*(gconst21)*(gconst29)))+(((gconst14)*(gconst16)*(gconst19)*(gconst33)))+(((gconst12)*(gconst29)*(gconst32)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst30)*(gconst35)))+(((gconst10)*(gconst18)*(gconst25)*(gconst29)))+(((-1.00000000000000)*(gconst12)*(gconst17)*(gconst23)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst18)*(gconst34)))+(((-1.00000000000000)*(gconst0)*(gconst18)*(gconst29)*(gconst35)))+(((-1.00000000000000)*(gconst14)*(gconst28)*(gconst34)*(gconst6)))+(((gconst13)*(gconst30)*(gconst34)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst19)*(gconst33)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst20)*(gconst33)))+(((gconst21)*(gconst26)*(gconst28)*(gconst7)))+(((-1.00000000000000)*(gconst21)*(gconst26)*(gconst3)*(gconst32)))+(((gconst17)*(gconst24)*(gconst33)*(gconst8)))+(((gconst15)*(gconst18)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst15)*(gconst26)*(gconst33)*(gconst8)))+(((gconst13)*(gconst17)*(gconst22)*(gconst30)))+(((gconst17)*(gconst24)*(gconst32)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst29)*(gconst33)*(gconst7)))+(((gconst14)*(gconst27)*(gconst35)*(gconst6)))+(((gconst20)*(gconst24)*(gconst29)*(gconst9)))+(((gconst18)*(gconst26)*(gconst3)*(gconst35)))+(((gconst2)*(gconst23)*(gconst27)*(gconst30)))+(((gconst14)*(gconst16)*(gconst21)*(gconst31)))+(((gconst22)*(gconst25)*(gconst29)*(gconst6)))+(((gconst0)*(gconst21)*(gconst29)*(gconst32)))+(((gconst15)*(gconst2)*(gconst30)*(gconst35)))+(((gconst1)*(gconst18)*(gconst29)*(gconst34)))+(((-1.00000000000000)*(gconst19)*(gconst25)*(gconst33)*(gconst5)))+(((-1.00000000000000)*(gconst12)*(gconst17)*(gconst18)*(gconst35)))+(((-1.00000000000000)*(gconst1)*(gconst19)*(gconst29)*(gconst33)))+(((-1.00000000000000)*(gconst17)*(gconst25)*(gconst33)*(gconst7)))+(((-1.00000000000000)*(gconst17)*(gconst24)*(gconst35)*(gconst6)))+(((gconst11)*(gconst18)*(gconst26)*(gconst27)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst21)*(gconst32)))+(((-1.00000000000000)*(gconst16)*(gconst18)*(gconst22)*(gconst26)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst30)*(gconst34)))+(((gconst14)*(gconst19)*(gconst21)*(gconst28)))+(((gconst12)*(gconst17)*(gconst21)*(gconst32)))+(((-1.00000000000000)*(gconst22)*(gconst26)*(gconst28)*(gconst6)))+(((gconst23)*(gconst26)*(gconst3)*(gconst30)))+(((gconst12)*(gconst32)*(gconst33)*(gconst5)))+(((gconst14)*(gconst28)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst29)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst31)*(gconst5)))+(((gconst2)*(gconst21)*(gconst28)*(gconst31)))+(((-1.00000000000000)*(gconst11)*(gconst17)*(gconst24)*(gconst30)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst14)*(gconst27)*(gconst33)*(gconst8)))+(((gconst10)*(gconst13)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst13)*(gconst31)*(gconst33)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst23)*(gconst24)))+(((-1.00000000000000)*(gconst17)*(gconst25)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst23)*(gconst24)*(gconst29)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst28)*(gconst30)))+(((gconst16)*(gconst19)*(gconst21)*(gconst26)))+(((-1.00000000000000)*(gconst18)*(gconst24)*(gconst35)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst26)*(gconst28)))+(((gconst14)*(gconst18)*(gconst23)*(gconst27)))+(((-1.00000000000000)*(gconst17)*(gconst19)*(gconst21)*(gconst25)))+(((-1.00000000000000)*(gconst14)*(gconst30)*(gconst34)*(gconst4)))+(((-1.00000000000000)*(gconst2)*(gconst21)*(gconst27)*(gconst32)))+(((gconst17)*(gconst25)*(gconst34)*(gconst6)))+(((gconst14)*(gconst31)*(gconst33)*(gconst4)))+(((gconst17)*(gconst20)*(gconst21)*(gconst24)))+(((gconst21)*(gconst26)*(gconst31)*(gconst4)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst22)*(gconst30)))+(((gconst13)*(gconst17)*(gconst18)*(gconst34)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst28)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst3)*(gconst33)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst21)*(gconst26)))+(((gconst1)*(gconst22)*(gconst29)*(gconst30)))+(((gconst21)*(gconst24)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst27)*(gconst33)))+(((gconst14)*(gconst28)*(gconst33)*(gconst7)))+(((gconst0)*(gconst17)*(gconst32)*(gconst33)))+(((gconst11)*(gconst15)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst30)*(gconst35)*(gconst5)))+(((-1.00000000000000)*(gconst16)*(gconst26)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst18)*(gconst23)*(gconst29)))+(((-1.00000000000000)*(gconst18)*(gconst26)*(gconst34)*(gconst4)))+(((-1.00000000000000)*(gconst21)*(gconst26)*(gconst27)*(gconst8)))+(((gconst14)*(gconst15)*(gconst18)*(gconst35)))+(((-1.00000000000000)*(gconst19)*(gconst25)*(gconst29)*(gconst9)))+(((gconst14)*(gconst15)*(gconst23)*(gconst30)))+(((gconst12)*(gconst17)*(gconst20)*(gconst33)))+(((gconst12)*(gconst29)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst22)*(gconst26)*(gconst30)*(gconst4)))+(((gconst19)*(gconst26)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst29)*(gconst35)*(gconst6)))+(((gconst20)*(gconst24)*(gconst33)*(gconst5)))+(((gconst18)*(gconst25)*(gconst34)*(gconst5)))+(((gconst19)*(gconst26)*(gconst33)*(gconst4)))+(((gconst13)*(gconst18)*(gconst22)*(gconst29)))+(((gconst16)*(gconst26)*(gconst31)*(gconst9)))+(((gconst16)*(gconst2)*(gconst31)*(gconst33)))+(((gconst11)*(gconst14)*(gconst27)*(gconst30)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst31)*(gconst33)))+(((gconst23)*(gconst26)*(gconst27)*(gconst6)))+(((gconst16)*(gconst26)*(gconst33)*(gconst7)))+(((-1.00000000000000)*(gconst2)*(gconst22)*(gconst28)*(gconst30)))+(((-1.00000000000000)*(gconst11)*(gconst18)*(gconst24)*(gconst29)))+(((gconst22)*(gconst25)*(gconst30)*(gconst5)))+(((gconst18)*(gconst2)*(gconst27)*(gconst35)))+(((-1.00000000000000)*(gconst23)*(gconst24)*(gconst30)*(gconst5)))+(((gconst21)*(gconst24)*(gconst32)*(gconst5)))+(((gconst19)*(gconst2)*(gconst28)*(gconst33)))+(((-1.00000000000000)*(gconst13)*(gconst29)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst26)*(gconst32)*(gconst9)))+(((gconst12)*(gconst20)*(gconst21)*(gconst29)))+(((gconst15)*(gconst26)*(gconst35)*(gconst6)))+(((gconst14)*(gconst3)*(gconst30)*(gconst35)))+(((gconst1)*(gconst17)*(gconst30)*(gconst34)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst21)*(gconst31)))+(((-1.00000000000000)*(gconst14)*(gconst20)*(gconst21)*(gconst27)))+(((-1.00000000000000)*(gconst14)*(gconst3)*(gconst32)*(gconst33)))+(((-1.00000000000000)*(gconst0)*(gconst23)*(gconst29)*(gconst30)))+(((gconst0)*(gconst20)*(gconst29)*(gconst33)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst28)*(gconst34)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst26)*(gconst30)))+(((gconst17)*(gconst18)*(gconst22)*(gconst25)))+(((gconst10)*(gconst17)*(gconst25)*(gconst30)))+(((gconst13)*(gconst29)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst27)*(gconst32)*(gconst9))));
op[4]=((((gconst0)*(gconst32)*(gconst33)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst18)*(gconst35)))+(((gconst12)*(gconst20)*(gconst33)*(gconst5)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst21)*(gconst31)))+(((-1.00000000000000)*(gconst2)*(gconst27)*(gconst32)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst31)*(gconst33)*(gconst5)))+(((-1.00000000000000)*(gconst16)*(gconst18)*(gconst2)*(gconst34)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst18)*(gconst22)))+(((-1.00000000000000)*(gconst26)*(gconst3)*(gconst33)*(gconst8)))+(((gconst24)*(gconst33)*(gconst5)*(gconst8)))+(((gconst0)*(gconst20)*(gconst21)*(gconst29)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst19)*(gconst33)))+(((gconst11)*(gconst26)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst33)*(gconst8)))+(((gconst26)*(gconst28)*(gconst7)*(gconst9)))+(((gconst2)*(gconst3)*(gconst30)*(gconst35)))+(((gconst12)*(gconst20)*(gconst29)*(gconst9)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst26)*(gconst6)))+(((gconst12)*(gconst17)*(gconst32)*(gconst9)))+(((gconst13)*(gconst17)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst17)*(gconst30)))+(((gconst14)*(gconst16)*(gconst19)*(gconst21)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst20)*(gconst33)))+(((gconst14)*(gconst21)*(gconst31)*(gconst4)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst28)*(gconst30)))+(((gconst24)*(gconst32)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst17)*(gconst18)*(gconst24)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst32)*(gconst9)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst22)*(gconst30)))+(((gconst12)*(gconst21)*(gconst32)*(gconst5)))+(((gconst12)*(gconst17)*(gconst33)*(gconst8)))+(((gconst10)*(gconst25)*(gconst30)*(gconst5)))+(((gconst19)*(gconst2)*(gconst21)*(gconst28)))+(((-1.00000000000000)*(gconst14)*(gconst21)*(gconst27)*(gconst8)))+(((-1.00000000000000)*(gconst17)*(gconst23)*(gconst24)*(gconst6)))+(((gconst14)*(gconst19)*(gconst28)*(gconst9)))+(((gconst1)*(gconst17)*(gconst22)*(gconst30)))+(((gconst14)*(gconst15)*(gconst35)*(gconst6)))+(((gconst2)*(gconst28)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst18)*(gconst23)*(gconst29)))+(((-1.00000000000000)*(gconst25)*(gconst29)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst26)*(gconst9)))+(((gconst0)*(gconst17)*(gconst21)*(gconst32)))+(((gconst20)*(gconst21)*(gconst24)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst33)*(gconst7)))+(((gconst1)*(gconst30)*(gconst34)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst28)*(gconst6)))+(((gconst18)*(gconst22)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst12)*(gconst17)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst24)*(gconst35)*(gconst5)*(gconst6)))+(((gconst14)*(gconst21)*(gconst28)*(gconst7)))+(((gconst12)*(gconst17)*(gconst20)*(gconst21)))+(((gconst14)*(gconst23)*(gconst27)*(gconst6)))+(((gconst17)*(gconst22)*(gconst25)*(gconst6)))+(((gconst16)*(gconst21)*(gconst26)*(gconst7)))+(((-1.00000000000000)*(gconst19)*(gconst21)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst16)*(gconst30)))+(((-1.00000000000000)*(gconst0)*(gconst29)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst26)*(gconst34)*(gconst4)*(gconst6)))+(((gconst13)*(gconst17)*(gconst18)*(gconst22)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst22)*(gconst28)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst20)*(gconst21)))+(((gconst14)*(gconst23)*(gconst3)*(gconst30)))+(((gconst14)*(gconst19)*(gconst33)*(gconst4)))+(((gconst13)*(gconst22)*(gconst30)*(gconst5)))+(((gconst10)*(gconst13)*(gconst17)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst30)*(gconst4)))+(((gconst1)*(gconst29)*(gconst34)*(gconst6)))+(((gconst17)*(gconst20)*(gconst24)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst33)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst26)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst29)*(gconst9)))+(((gconst15)*(gconst2)*(gconst23)*(gconst30)))+(((-1.00000000000000)*(gconst26)*(gconst3)*(gconst32)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst23)*(gconst29)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst24)*(gconst29)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst17)*(gconst18)*(gconst23)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst17)*(gconst21)*(gconst25)*(gconst7)))+(((gconst25)*(gconst34)*(gconst5)*(gconst6)))+(((gconst15)*(gconst18)*(gconst2)*(gconst35)))+(((-1.00000000000000)*(gconst2)*(gconst3)*(gconst32)*(gconst33)))+(((gconst26)*(gconst3)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst18)*(gconst29)))+(((gconst14)*(gconst16)*(gconst33)*(gconst7)))+(((-1.00000000000000)*(gconst26)*(gconst27)*(gconst8)*(gconst9)))+(((gconst10)*(gconst13)*(gconst18)*(gconst29)))+(((gconst10)*(gconst17)*(gconst18)*(gconst25)))+(((gconst0)*(gconst17)*(gconst20)*(gconst33)))+(((gconst16)*(gconst19)*(gconst2)*(gconst33)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst19)*(gconst21)))+(((gconst14)*(gconst16)*(gconst31)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst21)*(gconst3)*(gconst32)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst21)*(gconst32)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst18)*(gconst26)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst29)*(gconst30)))+(((-1.00000000000000)*(gconst11)*(gconst24)*(gconst30)*(gconst5)))+(((gconst2)*(gconst31)*(gconst33)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst19)*(gconst21)*(gconst29)))+(((-1.00000000000000)*(gconst2)*(gconst27)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst23)*(gconst30)))+(((gconst1)*(gconst10)*(gconst29)*(gconst30)))+(((gconst14)*(gconst15)*(gconst18)*(gconst23)))+(((gconst0)*(gconst29)*(gconst32)*(gconst9)))+(((gconst14)*(gconst18)*(gconst3)*(gconst35)))+(((gconst12)*(gconst21)*(gconst29)*(gconst8)))+(((gconst13)*(gconst22)*(gconst29)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst30)*(gconst34)*(gconst4)))+(((gconst2)*(gconst27)*(gconst35)*(gconst6)))+(((gconst1)*(gconst17)*(gconst18)*(gconst34)))+(((-1.00000000000000)*(gconst10)*(gconst26)*(gconst28)*(gconst6)))+(((gconst11)*(gconst2)*(gconst27)*(gconst30)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst18)*(gconst28)))+(((gconst11)*(gconst14)*(gconst15)*(gconst30)))+(((gconst11)*(gconst26)*(gconst3)*(gconst30)))+(((gconst18)*(gconst2)*(gconst23)*(gconst27)))+(((gconst1)*(gconst18)*(gconst22)*(gconst29)))+(((gconst24)*(gconst29)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst29)*(gconst33)*(gconst7)))+(((gconst2)*(gconst28)*(gconst33)*(gconst7)))+(((-1.00000000000000)*(gconst2)*(gconst28)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst30)*(gconst35)*(gconst5)))+(((gconst13)*(gconst18)*(gconst34)*(gconst5)))+(((gconst16)*(gconst19)*(gconst26)*(gconst9)))+(((gconst10)*(gconst25)*(gconst29)*(gconst6)))+(((-1.00000000000000)*(gconst25)*(gconst31)*(gconst5)*(gconst9)))+(((gconst26)*(gconst31)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst18)*(gconst27)))+(((-1.00000000000000)*(gconst10)*(gconst26)*(gconst30)*(gconst4)))+(((gconst19)*(gconst21)*(gconst26)*(gconst4)))+(((gconst17)*(gconst21)*(gconst24)*(gconst8)))+(((gconst15)*(gconst23)*(gconst26)*(gconst6)))+(((gconst26)*(gconst33)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst14)*(gconst20)*(gconst3)*(gconst33)))+(((-1.00000000000000)*(gconst25)*(gconst33)*(gconst5)*(gconst7)))+(((gconst18)*(gconst23)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst21)*(gconst31)*(gconst5)))+(((-1.00000000000000)*(gconst20)*(gconst21)*(gconst26)*(gconst3)))+(((gconst11)*(gconst15)*(gconst18)*(gconst26)))+(((-1.00000000000000)*(gconst17)*(gconst19)*(gconst25)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst21)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst12)*(gconst18)*(gconst35)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst34)*(gconst4)))+(((-1.00000000000000)*(gconst12)*(gconst23)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst20)*(gconst27)*(gconst9)))+(((gconst16)*(gconst2)*(gconst21)*(gconst31)))+(((-1.00000000000000)*(gconst1)*(gconst29)*(gconst31)*(gconst9)))+(((gconst0)*(gconst29)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst18)*(gconst23)*(gconst24)*(gconst5)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst21)*(gconst27))));
op[5]=((((-1.00000000000000)*(gconst0)*(gconst18)*(gconst35)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst33)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst2)*(gconst28)))+(((gconst2)*(gconst23)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst28)*(gconst6)))+(((gconst23)*(gconst26)*(gconst3)*(gconst6)))+(((gconst0)*(gconst17)*(gconst33)*(gconst8)))+(((gconst1)*(gconst17)*(gconst34)*(gconst6)))+(((gconst14)*(gconst31)*(gconst4)*(gconst9)))+(((gconst16)*(gconst2)*(gconst31)*(gconst9)))+(((gconst11)*(gconst18)*(gconst2)*(gconst27)))+(((gconst1)*(gconst18)*(gconst34)*(gconst5)))+(((gconst14)*(gconst28)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst18)*(gconst23)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst21)*(gconst5)))+(((gconst12)*(gconst17)*(gconst20)*(gconst9)))+(((-1.00000000000000)*(gconst21)*(gconst26)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst29)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst17)*(gconst18)))+(((-1.00000000000000)*(gconst17)*(gconst25)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst35)*(gconst5)*(gconst6)))+(((gconst13)*(gconst18)*(gconst22)*(gconst5)))+(((gconst15)*(gconst18)*(gconst2)*(gconst23)))+(((-1.00000000000000)*(gconst14)*(gconst20)*(gconst21)*(gconst3)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst19)*(gconst21)))+(((gconst12)*(gconst32)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst18)*(gconst24)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst17)*(gconst30)))+(((-1.00000000000000)*(gconst0)*(gconst23)*(gconst30)*(gconst5)))+(((gconst11)*(gconst18)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst16)*(gconst18)*(gconst2)*(gconst22)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst26)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst31)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst20)*(gconst21)))+(((gconst11)*(gconst14)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst33)*(gconst8)))+(((gconst2)*(gconst23)*(gconst3)*(gconst30)))+(((gconst0)*(gconst17)*(gconst20)*(gconst21)))+(((gconst22)*(gconst25)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst22)*(gconst26)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst33)*(gconst7)))+(((gconst0)*(gconst17)*(gconst32)*(gconst9)))+(((gconst0)*(gconst20)*(gconst29)*(gconst9)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst34)*(gconst4)))+(((gconst0)*(gconst20)*(gconst33)*(gconst5)))+(((gconst0)*(gconst21)*(gconst32)*(gconst5)))+(((gconst18)*(gconst2)*(gconst3)*(gconst35)))+(((gconst12)*(gconst17)*(gconst21)*(gconst8)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst3)*(gconst9)))+(((gconst10)*(gconst17)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst26)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst17)*(gconst23)*(gconst6)))+(((gconst14)*(gconst33)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst2)*(gconst21)*(gconst27)*(gconst8)))+(((gconst15)*(gconst2)*(gconst35)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst31)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst19)*(gconst25)*(gconst5)*(gconst9)))+(((gconst14)*(gconst15)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst18)*(gconst29)))+(((gconst2)*(gconst21)*(gconst28)*(gconst7)))+(((gconst19)*(gconst26)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst3)*(gconst30)))+(((gconst19)*(gconst2)*(gconst33)*(gconst4)))+(((gconst1)*(gconst10)*(gconst18)*(gconst29)))+(((-1.00000000000000)*(gconst23)*(gconst24)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst21)*(gconst3)*(gconst32)))+(((-1.00000000000000)*(gconst2)*(gconst22)*(gconst30)*(gconst4)))+(((gconst11)*(gconst15)*(gconst26)*(gconst6)))+(((gconst11)*(gconst14)*(gconst15)*(gconst18)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst19)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst30)*(gconst5)))+(((gconst13)*(gconst34)*(gconst5)*(gconst6)))+(((gconst16)*(gconst2)*(gconst33)*(gconst7)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst22)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst32)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst31)*(gconst9)))+(((gconst10)*(gconst13)*(gconst29)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst27)*(gconst8)*(gconst9)))+(((gconst19)*(gconst2)*(gconst28)*(gconst9)))+(((gconst1)*(gconst10)*(gconst17)*(gconst30)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst29)*(gconst6)))+(((gconst14)*(gconst18)*(gconst23)*(gconst3)))+(((gconst16)*(gconst26)*(gconst7)*(gconst9)))+(((gconst21)*(gconst24)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst16)*(gconst19)*(gconst9)))+(((gconst16)*(gconst19)*(gconst2)*(gconst21)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst21)*(gconst7)))+(((gconst1)*(gconst17)*(gconst18)*(gconst22)))+(((-1.00000000000000)*(gconst11)*(gconst17)*(gconst24)*(gconst6)))+(((gconst13)*(gconst17)*(gconst22)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst19)*(gconst33)*(gconst5)))+(((gconst1)*(gconst22)*(gconst29)*(gconst6)))+(((gconst2)*(gconst21)*(gconst31)*(gconst4)))+(((gconst10)*(gconst13)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst3)*(gconst32)*(gconst9)))+(((gconst14)*(gconst3)*(gconst35)*(gconst6)))+(((gconst12)*(gconst29)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst3)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst18)*(gconst23)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst3)*(gconst33)))+(((-1.00000000000000)*(gconst2)*(gconst22)*(gconst28)*(gconst6)))+(((gconst10)*(gconst18)*(gconst25)*(gconst5)))+(((gconst0)*(gconst21)*(gconst29)*(gconst8)))+(((gconst20)*(gconst24)*(gconst5)*(gconst9)))+(((gconst14)*(gconst16)*(gconst21)*(gconst7)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst34)*(gconst6)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst5)*(gconst7)))+(((gconst21)*(gconst26)*(gconst4)*(gconst7)))+(((gconst12)*(gconst33)*(gconst5)*(gconst8)))+(((gconst11)*(gconst15)*(gconst2)*(gconst30)))+(((gconst1)*(gconst22)*(gconst30)*(gconst5)))+(((gconst10)*(gconst13)*(gconst17)*(gconst18)))+(((gconst12)*(gconst20)*(gconst21)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst16)*(gconst18)))+(((gconst17)*(gconst24)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst19)*(gconst29)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst34)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst2)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst20)*(gconst9)))+(((gconst14)*(gconst19)*(gconst21)*(gconst4)))+(((-1.00000000000000)*(gconst0)*(gconst23)*(gconst29)*(gconst6))));
op[6]=((((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((gconst11)*(gconst2)*(gconst3)*(gconst30)))+(((gconst14)*(gconst21)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst18)*(gconst23)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst15)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst18)*(gconst4)))+(((gconst0)*(gconst20)*(gconst21)*(gconst5)))+(((gconst1)*(gconst18)*(gconst22)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst20)*(gconst9)))+(((gconst11)*(gconst15)*(gconst18)*(gconst2)))+(((-1.00000000000000)*(gconst2)*(gconst34)*(gconst4)*(gconst6)))+(((gconst1)*(gconst10)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst21)*(gconst3)))+(((gconst14)*(gconst23)*(gconst3)*(gconst6)))+(((gconst0)*(gconst17)*(gconst21)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst29)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst21)*(gconst5)*(gconst7)))+(((gconst15)*(gconst2)*(gconst23)*(gconst6)))+(((gconst11)*(gconst26)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst23)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst26)*(gconst3)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst25)*(gconst5)*(gconst7)*(gconst9)))+(((gconst14)*(gconst16)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst26)*(gconst4)*(gconst6)))+(((gconst12)*(gconst21)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst18)*(gconst5)))+(((-1.00000000000000)*(gconst2)*(gconst3)*(gconst32)*(gconst9)))+(((gconst0)*(gconst17)*(gconst20)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst17)*(gconst18)))+(((gconst2)*(gconst31)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst19)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst31)*(gconst5)*(gconst9)))+(((gconst24)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst29)*(gconst6)))+(((gconst2)*(gconst3)*(gconst35)*(gconst6)))+(((gconst1)*(gconst10)*(gconst17)*(gconst18)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst23)*(gconst6)))+(((gconst18)*(gconst2)*(gconst23)*(gconst3)))+(((gconst2)*(gconst28)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((gconst13)*(gconst22)*(gconst5)*(gconst6)))+(((gconst10)*(gconst13)*(gconst17)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst18)*(gconst2)))+(((gconst14)*(gconst19)*(gconst4)*(gconst9)))+(((gconst1)*(gconst34)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst17)*(gconst6)))+(((gconst19)*(gconst2)*(gconst21)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst19)*(gconst21)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst28)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst21)*(gconst3)*(gconst8)))+(((gconst26)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst30)*(gconst5)))+(((gconst0)*(gconst29)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst30)*(gconst4)))+(((gconst16)*(gconst19)*(gconst2)*(gconst9)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst22)*(gconst4)))+(((gconst11)*(gconst14)*(gconst18)*(gconst3)))+(((gconst2)*(gconst33)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst35)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst24)*(gconst5)*(gconst6)))+(((gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst7)*(gconst9)))+(((gconst10)*(gconst25)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst3)*(gconst33)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst5)*(gconst9)))+(((gconst0)*(gconst33)*(gconst5)*(gconst8)))+(((gconst11)*(gconst2)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst16)*(gconst6)))+(((gconst11)*(gconst14)*(gconst15)*(gconst6)))+(((gconst10)*(gconst13)*(gconst18)*(gconst5)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst22)*(gconst6)))+(((gconst0)*(gconst32)*(gconst5)*(gconst9)))+(((gconst1)*(gconst17)*(gconst22)*(gconst6)))+(((gconst12)*(gconst17)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst27)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst21)*(gconst7)))+(((-1.00000000000000)*(gconst1)*(gconst33)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst4)*(gconst6)))+(((gconst1)*(gconst10)*(gconst29)*(gconst6))));
op[7]=((((gconst1)*(gconst10)*(gconst18)*(gconst5)))+(((gconst1)*(gconst10)*(gconst17)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst17)*(gconst6)))+(((gconst12)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst19)*(gconst5)*(gconst9)))+(((gconst2)*(gconst21)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst1)*(gconst17)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst2)*(gconst6)))+(((gconst11)*(gconst15)*(gconst2)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst18)*(gconst5)))+(((gconst10)*(gconst13)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst2)*(gconst4)))+(((gconst0)*(gconst20)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst5)*(gconst7)))+(((gconst11)*(gconst18)*(gconst2)*(gconst3)))+(((gconst0)*(gconst21)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst2)*(gconst22)*(gconst4)*(gconst6)))+(((gconst14)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst4)*(gconst6)))+(((gconst11)*(gconst14)*(gconst3)*(gconst6)))+(((gconst0)*(gconst17)*(gconst8)*(gconst9)))+(((gconst16)*(gconst2)*(gconst7)*(gconst9)))+(((gconst1)*(gconst22)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst23)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst5)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst21)*(gconst3)*(gconst8)))+(((gconst19)*(gconst2)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst3)*(gconst8)*(gconst9)))+(((gconst2)*(gconst23)*(gconst3)*(gconst6))));
op[8]=((((-1.00000000000000)*(gconst2)*(gconst3)*(gconst8)*(gconst9)))+(((gconst11)*(gconst2)*(gconst3)*(gconst6)))+(((gconst1)*(gconst10)*(gconst5)*(gconst6)))+(((gconst0)*(gconst5)*(gconst8)*(gconst9)))+(((gconst2)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst5)*(gconst7)*(gconst9))));
polyroots8(op,zeror,numroots);
IKReal j18array[8], cj18array[8], sj18array[8], tempj18array[1];
int numsolutions = 0;
for(int ij18 = 0; ij18 < numroots; ++ij18)
{
IKReal htj18 = zeror[ij18];
tempj18array[0]=((2.00000000000000)*(atan(htj18)));
for(int kj18 = 0; kj18 < 1; ++kj18)
{
j18array[numsolutions] = tempj18array[kj18];
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
sj18array[numsolutions] = IKsin(j18array[numsolutions]);
cj18array[numsolutions] = IKcos(j18array[numsolutions]);
numsolutions++;
}
}
bool j18valid[8]={true,true,true,true,true,true,true,true};
_nj18 = 8;
for(int ij18 = 0; ij18 < numsolutions; ++ij18)
    {
if( !j18valid[ij18] )
{
    continue;
}
    j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
htj18 = IKtan(j18/2);

_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < numsolutions; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
{
IKReal dummyeval[1];
IKReal gconst52;
gconst52=IKsign(((((-0.0225000000000000)*(cj18)*(px)*(r02)))+(((0.0225000000000000)*(pz)*(r01)*(sj18)))+(((0.0225000000000000)*(cj18)*(pz)*(r00)))+(((-0.0225000000000000)*(py)*(r02)*(sj18)))));
dummyeval[0]=((((-1.00000000000000)*(cj18)*(px)*(r02)))+(((-1.00000000000000)*(py)*(r02)*(sj18)))+(((pz)*(r01)*(sj18)))+(((cj18)*(pz)*(r00))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IKReal x17=(py)*(py);
IKReal x18=(pz)*(pz);
IKReal x19=(px)*(px);
if( IKabs(((gconst52)*(((((0.0300000000000000)*(px)*(pz)*(r00)))+(((-0.210000000000000)*(r01)*(sj18)*(x17)))+(((-0.210000000000000)*(py)*(pz)*(r02)*(sj18)))+(((-0.210000000000000)*(cj18)*(r00)*(x19)))+(((-0.0150000000000000)*(pp)*(r02)))+(((-0.210000000000000)*(cj18)*(px)*(py)*(r01)))+(((0.105000000000000)*(pp)*(r01)*(sj18)))+(((0.105000000000000)*(cj18)*(pp)*(r00)))+(((-0.000458473312500000)*(r01)*(sj18)))+(((6.54961875000000e-5)*(r02)))+(((0.0300000000000000)*(py)*(pz)*(r01)))+(((-0.000458473312500000)*(cj18)*(r00)))+(((-0.210000000000000)*(px)*(py)*(r00)*(sj18)))+(((-0.210000000000000)*(cj18)*(px)*(pz)*(r02)))+(((0.0300000000000000)*(r02)*(x18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((6.54961875000000e-5)*(cj18)*(r00)))+(((-0.0150000000000000)*(pp)*(r01)*(sj18)))+(((0.0300000000000000)*(cj18)*(px)*(pz)*(r02)))+(((-0.0150000000000000)*(cj18)*(pp)*(r00)))+(((0.210000000000000)*(r02)*(x18)))+(((0.210000000000000)*(py)*(pz)*(r01)))+(((0.0300000000000000)*(px)*(py)*(r00)*(sj18)))+(((0.0300000000000000)*(cj18)*(r00)*(x19)))+(((0.0300000000000000)*(py)*(pz)*(r02)*(sj18)))+(((0.210000000000000)*(px)*(pz)*(r00)))+(((-0.105000000000000)*(pp)*(r02)))+(((0.0300000000000000)*(r01)*(sj18)*(x17)))+(((0.0300000000000000)*(cj18)*(px)*(py)*(r01)))+(((6.54961875000000e-5)*(r01)*(sj18)))+(((0.000458473312500000)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((gconst52)*(((((0.0300000000000000)*(px)*(pz)*(r00)))+(((-0.210000000000000)*(r01)*(sj18)*(x17)))+(((-0.210000000000000)*(py)*(pz)*(r02)*(sj18)))+(((-0.210000000000000)*(cj18)*(r00)*(x19)))+(((-0.0150000000000000)*(pp)*(r02)))+(((-0.210000000000000)*(cj18)*(px)*(py)*(r01)))+(((0.105000000000000)*(pp)*(r01)*(sj18)))+(((0.105000000000000)*(cj18)*(pp)*(r00)))+(((-0.000458473312500000)*(r01)*(sj18)))+(((6.54961875000000e-5)*(r02)))+(((0.0300000000000000)*(py)*(pz)*(r01)))+(((-0.000458473312500000)*(cj18)*(r00)))+(((-0.210000000000000)*(px)*(py)*(r00)*(sj18)))+(((-0.210000000000000)*(cj18)*(px)*(pz)*(r02)))+(((0.0300000000000000)*(r02)*(x18)))))), ((gconst52)*(((((6.54961875000000e-5)*(cj18)*(r00)))+(((-0.0150000000000000)*(pp)*(r01)*(sj18)))+(((0.0300000000000000)*(cj18)*(px)*(pz)*(r02)))+(((-0.0150000000000000)*(cj18)*(pp)*(r00)))+(((0.210000000000000)*(r02)*(x18)))+(((0.210000000000000)*(py)*(pz)*(r01)))+(((0.0300000000000000)*(px)*(py)*(r00)*(sj18)))+(((0.0300000000000000)*(cj18)*(r00)*(x19)))+(((0.0300000000000000)*(py)*(pz)*(r02)*(sj18)))+(((0.210000000000000)*(px)*(pz)*(r00)))+(((-0.105000000000000)*(pp)*(r02)))+(((0.0300000000000000)*(r01)*(sj18)*(x17)))+(((0.0300000000000000)*(cj18)*(px)*(py)*(r01)))+(((6.54961875000000e-5)*(r01)*(sj18)))+(((0.000458473312500000)*(r02)))))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IKReal evalcond[2];
IKReal x20=IKcos(j19);
IKReal x21=IKsin(j19);
evalcond[0]=((-0.00436641250000000)+(((-0.0300000000000000)*(py)*(sj18)*(x21)))+(((-0.210000000000000)*(cj18)*(px)*(x20)))+(((-0.210000000000000)*(pz)*(x21)))+(((0.0300000000000000)*(pz)*(x20)))+(((-0.0300000000000000)*(cj18)*(px)*(x21)))+(pp)+(((-0.210000000000000)*(py)*(sj18)*(x20))));
evalcond[1]=((((-0.105000000000000)*(r02)*(x21)))+(((-0.105000000000000)*(r01)*(sj18)*(x20)))+(((-0.105000000000000)*(cj18)*(r00)*(x20)))+(((0.0150000000000000)*(r02)*(x20)))+(((pz)*(r02)))+(((py)*(r01)))+(((-0.0150000000000000)*(cj18)*(r00)*(x21)))+(((-0.0150000000000000)*(r01)*(sj18)*(x21)))+(((px)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst53;
gconst53=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst54;
gconst54=-2.00000000000000;
IKReal gconst55;
gconst55=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst56;
gconst56=((-0.228950000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst57;
gconst57=((0.0189500000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst58;
gconst58=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst59;
gconst59=-2.00000000000000;
IKReal gconst60;
gconst60=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst61;
gconst61=((-0.228950000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst62;
gconst62=((0.0189500000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst63;
gconst63=0.0636000000000000;
IKReal gconst64;
gconst64=0.0636000000000000;
IKReal gconst65;
gconst65=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst66;
gconst66=2.00000000000000;
IKReal gconst67;
gconst67=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst68;
gconst68=((-0.228950000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst69;
gconst69=((0.0189500000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst70;
gconst70=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst71;
gconst71=2.00000000000000;
IKReal gconst72;
gconst72=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
IKReal gconst73;
gconst73=((-0.228950000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
IKReal gconst74;
gconst74=((0.0189500000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px))));
dummyeval[0]=((((gconst67)*(gconst68)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst65)*(gconst69)*(gconst70)*(gconst74)))+(((gconst65)*(gconst69)*(gconst72)*(gconst73)))+(((-1.00000000000000)*(gconst67)*(gconst68)*(gconst72)*(gconst73)))+(((-1.00000000000000)*(gconst66)*(gconst69)*(gconst71)*(gconst73))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[8+1], zeror[8];
int numroots;
op[0]=((((gconst67)*(gconst68)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst65)*(gconst69)*(gconst70)*(gconst74)))+(((gconst65)*(gconst69)*(gconst72)*(gconst73)))+(((-1.00000000000000)*(gconst67)*(gconst68)*(gconst72)*(gconst73)))+(((-1.00000000000000)*(gconst66)*(gconst69)*(gconst71)*(gconst73))));
op[1]=((((gconst64)*(gconst66)*(gconst69)*(gconst70)))+(((gconst63)*(gconst67)*(gconst71)*(gconst73))));
op[2]=((((gconst57)*(gconst65)*(gconst72)*(gconst73)))+(((gconst56)*(gconst67)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst56)*(gconst67)*(gconst72)*(gconst73)))+(((-1.00000000000000)*(gconst53)*(gconst69)*(gconst70)*(gconst74)))+(((gconst55)*(gconst68)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst58)*(gconst65)*(gconst69)*(gconst74)))+(((-1.00000000000000)*(gconst54)*(gconst69)*(gconst71)*(gconst73)))+(((-1.00000000000000)*(gconst57)*(gconst65)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst59)*(gconst66)*(gconst69)*(gconst73)))+(((-1.00000000000000)*(gconst57)*(gconst66)*(gconst71)*(gconst73)))+(((gconst62)*(gconst67)*(gconst68)*(gconst70)))+(((gconst53)*(gconst69)*(gconst72)*(gconst73)))+(((gconst61)*(gconst65)*(gconst69)*(gconst72)))+(((gconst58)*(gconst67)*(gconst68)*(gconst74)))+(((-1.00000000000000)*(gconst60)*(gconst67)*(gconst68)*(gconst73)))+(((-1.00000000000000)*(gconst55)*(gconst68)*(gconst72)*(gconst73)))+(((-1.00000000000000)*(gconst61)*(gconst67)*(gconst68)*(gconst72)))+(((-1.00000000000000)*(gconst61)*(gconst66)*(gconst69)*(gconst71)))+(((-1.00000000000000)*(gconst63)*(gconst64)*(gconst67)*(gconst70)))+(((-1.00000000000000)*(gconst62)*(gconst65)*(gconst69)*(gconst70)))+(((gconst60)*(gconst65)*(gconst69)*(gconst73))));
op[3]=((((gconst61)*(gconst63)*(gconst67)*(gconst71)))+(((gconst57)*(gconst64)*(gconst66)*(gconst70)))+(((gconst55)*(gconst63)*(gconst71)*(gconst73)))+(((gconst59)*(gconst63)*(gconst67)*(gconst73)))+(((gconst58)*(gconst64)*(gconst66)*(gconst69)))+(((gconst54)*(gconst64)*(gconst69)*(gconst70))));
op[4]=((((-1.00000000000000)*(gconst57)*(gconst59)*(gconst66)*(gconst73)))+(((-1.00000000000000)*(gconst55)*(gconst61)*(gconst68)*(gconst72)))+(((gconst53)*(gconst60)*(gconst69)*(gconst73)))+(((-1.00000000000000)*(gconst57)*(gconst61)*(gconst66)*(gconst71)))+(((-1.00000000000000)*(gconst55)*(gconst60)*(gconst68)*(gconst73)))+(((-1.00000000000000)*(gconst57)*(gconst62)*(gconst65)*(gconst70)))+(((-1.00000000000000)*(gconst54)*(gconst57)*(gconst71)*(gconst73)))+(((-1.00000000000000)*(gconst55)*(gconst56)*(gconst72)*(gconst73)))+(((gconst60)*(gconst61)*(gconst65)*(gconst69)))+(((gconst56)*(gconst58)*(gconst67)*(gconst74)))+(((-1.00000000000000)*(gconst53)*(gconst58)*(gconst69)*(gconst74)))+(((-1.00000000000000)*(gconst53)*(gconst57)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst54)*(gconst59)*(gconst69)*(gconst73)))+(((-1.00000000000000)*(gconst56)*(gconst60)*(gconst67)*(gconst73)))+(((-1.00000000000000)*(gconst58)*(gconst62)*(gconst65)*(gconst69)))+(((gconst57)*(gconst61)*(gconst65)*(gconst72)))+(((gconst53)*(gconst57)*(gconst72)*(gconst73)))+(((gconst53)*(gconst61)*(gconst69)*(gconst72)))+(((-1.00000000000000)*(gconst59)*(gconst61)*(gconst66)*(gconst69)))+(((gconst55)*(gconst62)*(gconst68)*(gconst70)))+(((gconst56)*(gconst62)*(gconst67)*(gconst70)))+(((gconst58)*(gconst62)*(gconst67)*(gconst68)))+(((-1.00000000000000)*(gconst60)*(gconst61)*(gconst67)*(gconst68)))+(((-1.00000000000000)*(gconst55)*(gconst63)*(gconst64)*(gconst70)))+(((-1.00000000000000)*(gconst53)*(gconst62)*(gconst69)*(gconst70)))+(((-1.00000000000000)*(gconst54)*(gconst61)*(gconst69)*(gconst71)))+(((gconst55)*(gconst56)*(gconst70)*(gconst74)))+(((-1.00000000000000)*(gconst56)*(gconst61)*(gconst67)*(gconst72)))+(((gconst55)*(gconst58)*(gconst68)*(gconst74)))+(((-1.00000000000000)*(gconst57)*(gconst58)*(gconst65)*(gconst74)))+(((gconst57)*(gconst60)*(gconst65)*(gconst73)))+(((-1.00000000000000)*(gconst58)*(gconst63)*(gconst64)*(gconst67))));
op[5]=((((gconst55)*(gconst61)*(gconst63)*(gconst71)))+(((gconst54)*(gconst58)*(gconst64)*(gconst69)))+(((gconst57)*(gconst58)*(gconst64)*(gconst66)))+(((gconst55)*(gconst59)*(gconst63)*(gconst73)))+(((gconst54)*(gconst57)*(gconst64)*(gconst70)))+(((gconst59)*(gconst61)*(gconst63)*(gconst67))));
op[6]=((((-1.00000000000000)*(gconst55)*(gconst60)*(gconst61)*(gconst68)))+(((-1.00000000000000)*(gconst56)*(gconst60)*(gconst61)*(gconst67)))+(((-1.00000000000000)*(gconst55)*(gconst58)*(gconst63)*(gconst64)))+(((-1.00000000000000)*(gconst54)*(gconst57)*(gconst59)*(gconst73)))+(((-1.00000000000000)*(gconst53)*(gconst58)*(gconst62)*(gconst69)))+(((-1.00000000000000)*(gconst53)*(gconst57)*(gconst62)*(gconst70)))+(((-1.00000000000000)*(gconst53)*(gconst57)*(gconst58)*(gconst74)))+(((-1.00000000000000)*(gconst55)*(gconst56)*(gconst61)*(gconst72)))+(((-1.00000000000000)*(gconst57)*(gconst59)*(gconst61)*(gconst66)))+(((-1.00000000000000)*(gconst54)*(gconst57)*(gconst61)*(gconst71)))+(((-1.00000000000000)*(gconst54)*(gconst59)*(gconst61)*(gconst69)))+(((gconst57)*(gconst60)*(gconst61)*(gconst65)))+(((gconst53)*(gconst57)*(gconst61)*(gconst72)))+(((gconst53)*(gconst60)*(gconst61)*(gconst69)))+(((-1.00000000000000)*(gconst55)*(gconst56)*(gconst60)*(gconst73)))+(((gconst56)*(gconst58)*(gconst62)*(gconst67)))+(((gconst55)*(gconst56)*(gconst62)*(gconst70)))+(((gconst55)*(gconst58)*(gconst62)*(gconst68)))+(((gconst55)*(gconst56)*(gconst58)*(gconst74)))+(((-1.00000000000000)*(gconst57)*(gconst58)*(gconst62)*(gconst65)))+(((gconst53)*(gconst57)*(gconst60)*(gconst73))));
op[7]=((((gconst55)*(gconst59)*(gconst61)*(gconst63)))+(((gconst54)*(gconst57)*(gconst58)*(gconst64))));
op[8]=((((-1.00000000000000)*(gconst53)*(gconst57)*(gconst58)*(gconst62)))+(((gconst55)*(gconst56)*(gconst58)*(gconst62)))+(((gconst53)*(gconst57)*(gconst60)*(gconst61)))+(((-1.00000000000000)*(gconst55)*(gconst56)*(gconst60)*(gconst61)))+(((-1.00000000000000)*(gconst54)*(gconst57)*(gconst59)*(gconst61))));
polyroots8(op,zeror,numroots);
IKReal j22array[8], cj22array[8], sj22array[8], tempj22array[1];
int numsolutions = 0;
for(int ij22 = 0; ij22 < numroots; ++ij22)
{
IKReal htj22 = zeror[ij22];
tempj22array[0]=((2.00000000000000)*(atan(htj22)));
for(int kj22 = 0; kj22 < 1; ++kj22)
{
j22array[numsolutions] = tempj22array[kj22];
if( j22array[numsolutions] > IKPI )
{
    j22array[numsolutions]-=IK2PI;
}
else if( j22array[numsolutions] < -IKPI )
{
    j22array[numsolutions]+=IK2PI;
}
sj22array[numsolutions] = IKsin(j22array[numsolutions]);
cj22array[numsolutions] = IKcos(j22array[numsolutions]);
numsolutions++;
}
}
bool j22valid[8]={true,true,true,true,true,true,true,true};
_nj22 = 8;
for(int ij22 = 0; ij22 < numsolutions; ++ij22)
    {
if( !j22valid[ij22] )
{
    continue;
}
    j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
htj22 = IKtan(j22/2);

_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < numsolutions; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
{
IKReal dummyeval[1];
dummyeval[0]=cj22;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j22)), 6.28318530717959)));
evalcond[1]=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IKReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19)))))+IKsqr(((((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19)))), ((((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01)))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IKReal evalcond[2];
evalcond[0]=((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(IKcos(j20))))+(((cj18)*(r01))));
evalcond[1]=((((-1.00000000000000)*(IKsin(j20))))+(((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst92;
gconst92=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01))));
evalcond[3]=((((-1.00000000000000)*(px)*(sj18)))+(((cj18)*(py))));
evalcond[4]=((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((0.225964189918779)+(((-7.93716226438050)*(py)*(sj18)*(sj19)))+(((-7.93716226438050)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(py)*(sj18)))+(((-1.01815958050545)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.818129644052371)+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.225964189918779)+(((-7.93716226438050)*(py)*(sj18)*(sj19)))+(((-7.93716226438050)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(py)*(sj18)))+(((-1.01815958050545)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(cj19)*(px)))))+IKsqr(((-0.818129644052371)+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((0.225964189918779)+(((-7.93716226438050)*(py)*(sj18)*(sj19)))+(((-7.93716226438050)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(py)*(sj18)))+(((-1.01815958050545)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(cj19)*(px)))), ((-0.818129644052371)+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[2];
IKReal x22=IKcos(j21);
IKReal x23=IKsin(j21);
evalcond[0]=((-0.105000000000000)+(((pz)*(sj19)))+(((0.0159000000000000)*(x23)))+(((cj19)*(py)*(sj18)))+(((-0.123950000000000)*(x22)))+(((cj18)*(cj19)*(px))));
evalcond[1]=((0.0150000000000000)+(((-0.123950000000000)*(x23)))+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((-0.0159000000000000)*(x22)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01))));
evalcond[3]=((((-1.00000000000000)*(px)*(sj18)))+(((cj18)*(py))));
evalcond[4]=((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((-0.0121506780126357)+(((7.93716226438050)*(py)*(sj18)*(sj19)))+(((-1.01815958050545)*(cj19)*(py)*(sj18)))+(((7.93716226438050)*(cj18)*(px)*(sj19)))+(((-7.93716226438050)*(cj19)*(pz)))+(((-1.01815958050545)*(pz)*(sj19)))+(((-1.01815958050545)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.848674431467535)+(((1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(pz)))+(((7.93716226438050)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0121506780126357)+(((7.93716226438050)*(py)*(sj18)*(sj19)))+(((-1.01815958050545)*(cj19)*(py)*(sj18)))+(((7.93716226438050)*(cj18)*(px)*(sj19)))+(((-7.93716226438050)*(cj19)*(pz)))+(((-1.01815958050545)*(pz)*(sj19)))+(((-1.01815958050545)*(cj18)*(cj19)*(px)))))+IKsqr(((-0.848674431467535)+(((1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(pz)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((-0.0121506780126357)+(((7.93716226438050)*(py)*(sj18)*(sj19)))+(((-1.01815958050545)*(cj19)*(py)*(sj18)))+(((7.93716226438050)*(cj18)*(px)*(sj19)))+(((-7.93716226438050)*(cj19)*(pz)))+(((-1.01815958050545)*(pz)*(sj19)))+(((-1.01815958050545)*(cj18)*(cj19)*(px)))), ((-0.848674431467535)+(((1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(pz)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[2];
IKReal x24=IKcos(j21);
IKReal x25=IKsin(j21);
evalcond[0]=((-0.105000000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((-0.123950000000000)*(x24)))+(((cj18)*(cj19)*(px)))+(((0.0159000000000000)*(x25))));
evalcond[1]=((0.0150000000000000)+(((0.0159000000000000)*(x24)))+(((0.123950000000000)*(x25)))+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst92)*(((((-1272000.00000000)*(pz)*(sj19)*(sj20)))+(((9916000.00000000)*(px)*(sj18)))+(((-1272000.00000000)*(cj19)*(py)*(sj18)*(sj20)))+(((-1272000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((133560.000000000)*(sj20)))+(((-9916000.00000000)*(cj18)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst92)*(((((-1041180.00000000)*(sj20)))+(((9916000.00000000)*(pz)*(sj19)*(sj20)))+(((-1272000.00000000)*(cj18)*(py)))+(((1272000.00000000)*(px)*(sj18)))+(((9916000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((9916000.00000000)*(cj19)*(py)*(sj18)*(sj20))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst92)*(((((-1272000.00000000)*(pz)*(sj19)*(sj20)))+(((9916000.00000000)*(px)*(sj18)))+(((-1272000.00000000)*(cj19)*(py)*(sj18)*(sj20)))+(((-1272000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((133560.000000000)*(sj20)))+(((-9916000.00000000)*(cj18)*(py)))))), ((gconst92)*(((((-1041180.00000000)*(sj20)))+(((9916000.00000000)*(pz)*(sj19)*(sj20)))+(((-1272000.00000000)*(cj18)*(py)))+(((1272000.00000000)*(px)*(sj18)))+(((9916000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((9916000.00000000)*(cj19)*(py)*(sj18)*(sj20)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[3];
IKReal x26=IKsin(j21);
IKReal x27=IKcos(j21);
evalcond[0]=((-0.105000000000000)+(((-0.123950000000000)*(x27)))+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px)))+(((0.0159000000000000)*(x26))));
evalcond[1]=((((0.123950000000000)*(sj20)*(x26)))+(((-1.00000000000000)*(px)*(sj18)))+(((0.0159000000000000)*(sj20)*(x27)))+(((cj18)*(py))));
evalcond[2]=((0.0150000000000000)+(((-0.123950000000000)*(cj20)*(x26)))+(((-0.0159000000000000)*(cj20)*(x27)))+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j22)), 6.28318530717959)));
evalcond[1]=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IKReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(((((r01)*(sj18)*(sj19)))+(((cj18)*(r00)*(sj19)))+(((-1.00000000000000)*(cj19)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj18)*(r01)))+(((r00)*(sj18))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(sj18)*(sj19)))+(((cj18)*(r00)*(sj19)))+(((-1.00000000000000)*(cj19)*(r02)))))+IKsqr(((((-1.00000000000000)*(cj18)*(r01)))+(((r00)*(sj18)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j20array[0]=IKatan2(((((r01)*(sj18)*(sj19)))+(((cj18)*(r00)*(sj19)))+(((-1.00000000000000)*(cj19)*(r02)))), ((((-1.00000000000000)*(cj18)*(r01)))+(((r00)*(sj18)))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IKReal evalcond[2];
evalcond[0]=((((-1.00000000000000)*(r00)*(sj18)))+(IKcos(j20))+(((cj18)*(r01))));
evalcond[1]=((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(IKsin(j20))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst93;
gconst93=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01))));
evalcond[3]=((((-1.00000000000000)*(px)*(sj18)))+(((cj18)*(py))));
evalcond[4]=((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((0.0121506780126357)+(((-7.93716226438050)*(py)*(sj18)*(sj19)))+(((-7.93716226438050)*(cj18)*(px)*(sj19)))+(((1.01815958050545)*(pz)*(sj19)))+(((1.01815958050545)*(cj19)*(py)*(sj18)))+(((7.93716226438050)*(cj19)*(pz)))+(((1.01815958050545)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.848674431467535)+(((1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(pz)))+(((7.93716226438050)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0121506780126357)+(((-7.93716226438050)*(py)*(sj18)*(sj19)))+(((-7.93716226438050)*(cj18)*(px)*(sj19)))+(((1.01815958050545)*(pz)*(sj19)))+(((1.01815958050545)*(cj19)*(py)*(sj18)))+(((7.93716226438050)*(cj19)*(pz)))+(((1.01815958050545)*(cj18)*(cj19)*(px)))))+IKsqr(((-0.848674431467535)+(((1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(pz)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((0.0121506780126357)+(((-7.93716226438050)*(py)*(sj18)*(sj19)))+(((-7.93716226438050)*(cj18)*(px)*(sj19)))+(((1.01815958050545)*(pz)*(sj19)))+(((1.01815958050545)*(cj19)*(py)*(sj18)))+(((7.93716226438050)*(cj19)*(pz)))+(((1.01815958050545)*(cj18)*(cj19)*(px)))), ((-0.848674431467535)+(((1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(cj19)*(pz)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[2];
IKReal x28=IKcos(j21);
IKReal x29=IKsin(j21);
evalcond[0]=((-0.105000000000000)+(((-0.0159000000000000)*(x29)))+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((-0.123950000000000)*(x28)))+(((cj18)*(cj19)*(px))));
evalcond[1]=((0.0150000000000000)+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((0.0159000000000000)*(x28)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz)))+(((-0.123950000000000)*(x29))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj18)))+(((cj18)*(r01))));
evalcond[3]=((((-1.00000000000000)*(px)*(sj18)))+(((cj18)*(py))));
evalcond[4]=((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((-0.225964189918779)+(((7.93716226438050)*(py)*(sj18)*(sj19)))+(((1.01815958050545)*(pz)*(sj19)))+(((7.93716226438050)*(cj18)*(px)*(sj19)))+(((-7.93716226438050)*(cj19)*(pz)))+(((1.01815958050545)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.818129644052371)+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(cj18)*(cj19)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.225964189918779)+(((7.93716226438050)*(py)*(sj18)*(sj19)))+(((1.01815958050545)*(pz)*(sj19)))+(((7.93716226438050)*(cj18)*(px)*(sj19)))+(((-7.93716226438050)*(cj19)*(pz)))+(((1.01815958050545)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(cj19)*(px)))))+IKsqr(((-0.818129644052371)+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((-0.225964189918779)+(((7.93716226438050)*(py)*(sj18)*(sj19)))+(((1.01815958050545)*(pz)*(sj19)))+(((7.93716226438050)*(cj18)*(px)*(sj19)))+(((-7.93716226438050)*(cj19)*(pz)))+(((1.01815958050545)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj18)*(cj19)*(px)))), ((-0.818129644052371)+(((7.93716226438050)*(pz)*(sj19)))+(((7.93716226438050)*(cj19)*(py)*(sj18)))+(((1.01815958050545)*(cj19)*(pz)))+(((-1.01815958050545)*(cj18)*(px)*(sj19)))+(((-1.01815958050545)*(py)*(sj18)*(sj19)))+(((7.93716226438050)*(cj18)*(cj19)*(px)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[2];
IKReal x30=IKsin(j21);
IKReal x31=IKcos(j21);
evalcond[0]=((-0.105000000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((-0.0159000000000000)*(x30)))+(((-0.123950000000000)*(x31)))+(((cj18)*(cj19)*(px))));
evalcond[1]=((0.0150000000000000)+(((0.123950000000000)*(x30)))+(((-0.0159000000000000)*(x31)))+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst93)*(((((9916000.00000000)*(px)*(sj18)))+(((1272000.00000000)*(pz)*(sj19)*(sj20)))+(((-133560.000000000)*(sj20)))+(((1272000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((1272000.00000000)*(cj19)*(py)*(sj18)*(sj20)))+(((-9916000.00000000)*(cj18)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst93)*(((((-1041180.00000000)*(sj20)))+(((-1272000.00000000)*(px)*(sj18)))+(((9916000.00000000)*(pz)*(sj19)*(sj20)))+(((1272000.00000000)*(cj18)*(py)))+(((9916000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((9916000.00000000)*(cj19)*(py)*(sj18)*(sj20))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst93)*(((((9916000.00000000)*(px)*(sj18)))+(((1272000.00000000)*(pz)*(sj19)*(sj20)))+(((-133560.000000000)*(sj20)))+(((1272000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((1272000.00000000)*(cj19)*(py)*(sj18)*(sj20)))+(((-9916000.00000000)*(cj18)*(py)))))), ((gconst93)*(((((-1041180.00000000)*(sj20)))+(((-1272000.00000000)*(px)*(sj18)))+(((9916000.00000000)*(pz)*(sj19)*(sj20)))+(((1272000.00000000)*(cj18)*(py)))+(((9916000.00000000)*(cj18)*(cj19)*(px)*(sj20)))+(((9916000.00000000)*(cj19)*(py)*(sj18)*(sj20)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[3];
IKReal x32=IKsin(j21);
IKReal x33=IKcos(j21);
evalcond[0]=((-0.105000000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((cj18)*(cj19)*(px)))+(((-0.0159000000000000)*(x32)))+(((-0.123950000000000)*(x33))));
evalcond[1]=((((-1.00000000000000)*(px)*(sj18)))+(((0.123950000000000)*(sj20)*(x32)))+(((-0.0159000000000000)*(sj20)*(x33)))+(((cj18)*(py))));
evalcond[2]=((0.0150000000000000)+(((-0.123950000000000)*(cj20)*(x32)))+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((0.0159000000000000)*(cj20)*(x33)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IKReal x34=((IKabs(cj22) != 0)?((IKReal)1/(cj22)):(IKReal)1.0e30);
if( IKabs(((x34)*(((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000403388463089956)*(x34)*(((((318.000000000000)*(cj18)*(cj19)*(r00)*(sj22)))+(((20000.0000000000)*(cj22)*(pz)*(sj19)))+(((20000.0000000000)*(cj19)*(cj22)*(py)*(sj18)))+(((318.000000000000)*(cj19)*(r01)*(sj18)*(sj22)))+(((318.000000000000)*(r02)*(sj19)*(sj22)))+(((-2100.00000000000)*(cj22)))+(((20000.0000000000)*(cj18)*(cj19)*(cj22)*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x34)*(((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00)))))))+IKsqr(((0.000403388463089956)*(x34)*(((((318.000000000000)*(cj18)*(cj19)*(r00)*(sj22)))+(((20000.0000000000)*(cj22)*(pz)*(sj19)))+(((20000.0000000000)*(cj19)*(cj22)*(py)*(sj18)))+(((318.000000000000)*(cj19)*(r01)*(sj18)*(sj22)))+(((318.000000000000)*(r02)*(sj19)*(sj22)))+(((-2100.00000000000)*(cj22)))+(((20000.0000000000)*(cj18)*(cj19)*(cj22)*(px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x34)*(((((cj19)*(r01)*(sj18)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00)))))), ((0.000403388463089956)*(x34)*(((((318.000000000000)*(cj18)*(cj19)*(r00)*(sj22)))+(((20000.0000000000)*(cj22)*(pz)*(sj19)))+(((20000.0000000000)*(cj19)*(cj22)*(py)*(sj18)))+(((318.000000000000)*(cj19)*(r01)*(sj18)*(sj22)))+(((318.000000000000)*(r02)*(sj19)*(sj22)))+(((-2100.00000000000)*(cj22)))+(((20000.0000000000)*(cj18)*(cj19)*(cj22)*(px)))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break;
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[2];
IKReal x35=IKsin(j21);
evalcond[0]=((((cj19)*(r01)*(sj18)))+(((-1.00000000000000)*(cj22)*(x35)))+(((r02)*(sj19)))+(((cj18)*(cj19)*(r00))));
evalcond[1]=((-0.105000000000000)+(((pz)*(sj19)))+(((cj19)*(py)*(sj18)))+(((0.0159000000000000)*(sj22)*(x35)))+(((cj18)*(cj19)*(px)))+(((-0.123950000000000)*(IKcos(j21)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst91;
gconst91=IKsign((((sj22)*(sj22))+((((cj21)*(cj21))*((cj22)*(cj22))))));
dummyeval[0]=(((sj22)*(sj22))+((((cj21)*(cj21))*((cj22)*(cj22)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j20array[1], cj20array[1], sj20array[1];
bool j20valid[1]={false};
_nj20 = 1;
if( IKabs(((gconst91)*(((((-1.00000000000000)*(cj21)*(cj22)*(r00)*(sj18)))+(((cj19)*(r02)*(sj22)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19)*(sj22)))+(((cj18)*(cj21)*(cj22)*(r01)))+(((-1.00000000000000)*(r01)*(sj18)*(sj19)*(sj22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst91)*(((((cj21)*(cj22)*(r01)*(sj18)*(sj19)))+(((-1.00000000000000)*(r00)*(sj18)*(sj22)))+(((cj18)*(cj21)*(cj22)*(r00)*(sj19)))+(((-1.00000000000000)*(cj19)*(cj21)*(cj22)*(r02)))+(((cj18)*(r01)*(sj22))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j20array[0]=IKatan2(((gconst91)*(((((-1.00000000000000)*(cj21)*(cj22)*(r00)*(sj18)))+(((cj19)*(r02)*(sj22)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19)*(sj22)))+(((cj18)*(cj21)*(cj22)*(r01)))+(((-1.00000000000000)*(r01)*(sj18)*(sj19)*(sj22)))))), ((gconst91)*(((((cj21)*(cj22)*(r01)*(sj18)*(sj19)))+(((-1.00000000000000)*(r00)*(sj18)*(sj22)))+(((cj18)*(cj21)*(cj22)*(r00)*(sj19)))+(((-1.00000000000000)*(cj19)*(cj21)*(cj22)*(r02)))+(((cj18)*(r01)*(sj22)))))));
sj20array[0]=IKsin(j20array[0]);
cj20array[0]=IKcos(j20array[0]);
if( j20array[0] > IKPI )
{
    j20array[0]-=IK2PI;
}
else if( j20array[0] < -IKPI )
{    j20array[0]+=IK2PI;
}
j20valid[0] = true;
for(int ij20 = 0; ij20 < 1; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 1; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break;
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];
{
IKReal evalcond[4];
IKReal x36=IKsin(j20);
IKReal x37=IKcos(j20);
evalcond[0]=((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj21)*(cj22)*(x36)))+(((cj18)*(r01)))+(((-1.00000000000000)*(sj22)*(x37))));
evalcond[1]=((((0.123950000000000)*(sj21)*(x36)))+(((-0.0159000000000000)*(cj22)*(x37)))+(((-1.00000000000000)*(px)*(sj18)))+(((0.0159000000000000)*(cj21)*(sj22)*(x36)))+(((cj18)*(py))));
evalcond[2]=((((-1.00000000000000)*(r01)*(sj18)*(sj19)))+(((-1.00000000000000)*(sj22)*(x36)))+(((cj19)*(r02)))+(((-1.00000000000000)*(cj18)*(r00)*(sj19)))+(((cj21)*(cj22)*(x37))));
evalcond[3]=((0.0150000000000000)+(((-0.123950000000000)*(sj21)*(x37)))+(((-1.00000000000000)*(cj18)*(px)*(sj19)))+(((-0.0159000000000000)*(cj22)*(x36)))+(((-1.00000000000000)*(py)*(sj18)*(sj19)))+(((cj19)*(pz)))+(((-0.0159000000000000)*(cj21)*(sj22)*(x37))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j18;
solution.basesol[0].indices[0] = _ij18[0];
solution.basesol[0].indices[1] = _ij18[1];
solution.basesol[0].maxsolutions = _nj18;
solution.basesol[1].foffset = j19;
solution.basesol[1].indices[0] = _ij19[0];
solution.basesol[1].indices[1] = _ij19[1];
solution.basesol[1].maxsolutions = _nj19;
solution.basesol[2].foffset = j20;
solution.basesol[2].indices[0] = _ij20[0];
solution.basesol[2].indices[1] = _ij20[1];
solution.basesol[2].maxsolutions = _nj20;
solution.basesol[3].foffset = j21;
solution.basesol[3].indices[0] = _ij21[0];
solution.basesol[3].indices[1] = _ij21[1];
solution.basesol[3].maxsolutions = _nj21;
solution.basesol[4].foffset = j22;
solution.basesol[4].indices[0] = _ij22[0];
solution.basesol[4].indices[1] = _ij22[1];
solution.basesol[4].maxsolutions = _nj22;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}
static inline void polyroots8(IKReal rawcoeffs[8+1], IKReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    const IKReal tolsqrt = sqrt(std::numeric_limits<IKReal>::epsilon());
    complex<IKReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[8];
    IKReal err[8];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IKReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "856cf5c78aaf31385ada620400803275"; }

IKFAST_API const char* getIKFastVersion() { return "55"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
//int main(int argc, char** argv)
//{
//    if( argc != 12+getNumFreeParameters()+1 ) {
//        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
//               "Returns the ik solutions given the transformation of the end effector specified by\n"
//               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
//               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
//        return 1;
//    }
//
//    std::vector<IKSolution> vsolutions;
//    std::vector<IKReal> vfree(getNumFreeParameters());
//    IKReal eerot[9],eetrans[3];
//    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
//    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
//    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
//    for(std::size_t i = 0; i < vfree.size(); ++i)
//        vfree[i] = atof(argv[13+i]);
//    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);
//
//    if( !bSuccess ) {
//        fprintf(stderr,"Failed to get ik solution\n");
//        return -1;
//    }
//
//    printf("Found %d ik solutions:\n", (int)vsolutions.size());
//    std::vector<IKReal> sol(getNumJoints());
//    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
//        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
//        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
//        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
//        for( std::size_t j = 0; j < sol.size(); ++j)
//            printf("%.15f, ", sol[j]);
//        printf("\n");
//    }
//    return 0;
//}

#endif
